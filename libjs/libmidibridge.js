// LibMidiBridge
console.log('üéµ LibMidiBridge: –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');

let cachedMidiPlayer = null; // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–µ–µ—Ä –¥–ª—è Java

function getMidiPlayer() {
    if (!window.libmidi) {
        console.error('‚ùå LibMidiBridge.getMidiPlayer: window.libmidi –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
        return null;
    }
    
    const player = window.libmidi.midiPlayer;
    return player;
}

function midiSetSequence(sequence) {
    const player = getMidiPlayer();
    if (sequence && player) {
        player.setSequence(sequence);
    }
}

function midiPlay() {
    const player = getMidiPlayer();
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—Å–µ—Ç –ø–æ—Å–ª–µ end-of-media, –µ—Å–ª–∏ Java –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ play()
    if (player && player._hasEndedOnce) {
        // —Å–±—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
        if (player._lastSequence) {
            player.setSequence(player._lastSequence).then(() => {
                player.play();
            });
            return;
        }
        // –µ—Å–ª–∏ –±—É—Ñ–µ—Ä–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞ –Ω–∞—á–∞–ª–æ
        player.seek(0).then(() => player.play());
        return;
    }

    player.play();
}

function midiLoop(times) {
    const player = getMidiPlayer();
    player.loop(times);
}

function midiStop() {
    const player = getMidiPlayer();
    player.stop();
}

function midiShortEvent(status, data1, data2) {
    const player = getMidiPlayer();
    player.shortEvent(status, data1, data2);
}

function clearMidiPlayerCache() {
    cachedMidiPlayer = null;
}

const midiBridgeExports = {
    async Java_pl_zb3_freej2me_bridge_media_MidiBridge_getMidiPlayer(lib) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö Java –æ–±—ä–µ–∫—Ç–æ–≤
        if (!cachedMidiPlayer || cachedMidiPlayer !== window.libmidi.midiPlayer) {
            // –ï—Å–ª–∏ –ø–ª–µ–µ—Ä –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–µ—à
            if (cachedMidiPlayer && cachedMidiPlayer.removeAllListeners) {
                cachedMidiPlayer.removeAllListeners();
            }
            cachedMidiPlayer = window.libmidi.midiPlayer;
        }
        return cachedMidiPlayer;
    },
    async Java_pl_zb3_freej2me_bridge_media_MidiBridge_midiSetSequence(lib, player, sequence) {
        if (sequence) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –µ—Å–ª–∏ –ø–ª–µ–µ—Ä –∏–∑–º–µ–Ω–∏–ª—Å—è
            if (cachedMidiPlayer !== player) {
                cachedMidiPlayer = player;
            }
            
            await player.setSequence(sequence.buffer);
            return player.duration;
        }
        
        console.warn('‚ùå MidiBridge.midiSetSequence: –ü—É—Å—Ç–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
        return -1;
    },
    async Java_pl_zb3_freej2me_bridge_media_MidiBridge_midiPlay(lib, playerFromJava) {
        // 1. –í—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ–º getMidiPlayer, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–∑–æ–≤–æ–≤ –≤ –ª–æ–≥–∞—Ö
        const player = await midiBridgeExports.Java_pl_zb3_freej2me_bridge_media_MidiBridge_getMidiPlayer(lib);

        // 2. –°—Ä–∞–∑—É –¥–µ–ª–∞–µ–º hard-reset: stop ‚Üí setSequence(last) ‚Üí play
        try {
            await player.send({cmd: "stop"});

            if (player._lastSequence) {
                console.log('üéµ MidiBridge.midiPlay: Hard-reset ‚Äì –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º _lastSequence');
                await midiBridgeExports.Java_pl_zb3_freej2me_bridge_media_MidiBridge_midiSetSequence(
                    lib,
                    player,
                    new Uint8Array(player._lastSequence)
                );
            } else {
                // fallback: –ø—Ä–æ—Å—Ç–æ seek –Ω–∞ –Ω–∞—á–∞–ª–æ
                await player.send({cmd: "seek", pos: 0});
            }
        } catch (e) {
            console.warn('‚ùå MidiBridge.midiPlay: –û—à–∏–±–∫–∞ –≤ hard-reset', e);
        }

        // 3. –ü—É—Å–∫
        player.play();
    },
    async Java_pl_zb3_freej2me_bridge_media_MidiBridge_midiLoop(lib, player, times) {
        player.loop(times);
    },
    async Java_pl_zb3_freej2me_bridge_media_MidiBridge_midiStop(lib, player) {
        player.stop();
    },
    async Java_pl_zb3_freej2me_bridge_media_MidiBridge_midiShortEvent(lib, player, status, data1, data2) {
        player.shortEvent(status, data1, data2);
    },
    async Java_pl_zb3_freej2me_bridge_media_MidiBridge_midiGetPosition(lib, player) {
        return await player.getPosition();
    },
    async Java_pl_zb3_freej2me_bridge_media_MidiBridge_midiSeek(lib, player, pos) {
        player.seek(pos);
    },
    async Java_pl_zb3_freej2me_bridge_media_MidiBridge_midiGetVolume(lib, player) {
        return player.volume;
    },
    async Java_pl_zb3_freej2me_bridge_media_MidiBridge_midiSetVolume(lib, player, vol) {
        player.volume = vol;
    },
    getMidiPlayer,
    midiSetSequence,
    midiPlay,
    midiLoop,
    midiStop,
    midiShortEvent,
    clearMidiPlayerCache
};

self.libMidiBridge = midiBridgeExports;

export default midiBridgeExports;
